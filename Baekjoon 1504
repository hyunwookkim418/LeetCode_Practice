# C++
# Dijkstra's algorithm


#include <iostream>
#include <vector>
#include <queue>
using namespace std;

#define INF 987654321
#define MAX 801

int N, E;
vector<pair<int, int>> adj[MAX];

int dijkstra(int start, int dest) {
    vector<int> dist(N + 1, INF);

    priority_queue<pair<int, int>> pq;
    pq.push({0, start});
    dist[start] = 0;
    
    while (!pq.empty()) {
        int cur = pq.top().second;
        int d = -pq.top().first;
        pq.pop();
        
        // The default behavior of the priority_queue in C++
        // is to order elements in descending order based on their priority.
        // For example, if we insert pq.push({-300, 1}); pq.push({-200, 4}); pq.push({-100, 5}),
        // pq.push({-100, 5}) will be at the top of the priority queue.
        // Since the purpose of this problem is to find the shortest path,
        // placing a minus (-) sign before the distance inputs and calculating distances
        // allows us to obtain the shortest path without using a min priority queue
        // (priority_queue <int, vector<int>, greater<int>> gq;).

        if (dist[cur] < d) continue;

        for (int i = 0; i < adj[cur].size(); i++) {
            int nxt = adj[cur][i].first;
            int nxt_dist = adj[cur][i].second + d;
            if (nxt_dist < dist[nxt]) {
                dist[nxt] = nxt_dist;
                pq.push({-nxt_dist, nxt});
            }
        }
    }
    return dist[dest];
}

int main() {
    cin >> N >> E;

    for (int i = 0; i < E; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        adj[a].push_back({b, c});
        adj[b].push_back({a, c});
    }

    int v1, v2;
    cin >> v1 >> v2;

    // Start to v1, v2
    int StoV1 = dijkstra(1, v1);
    int StoV2 = dijkstra(1, v2);

    // v1 to v2
    int V1toV2 = dijkstra(v1, v2);

    // v1 to N, v2 to N
    int V1toN = dijkstra(v1, N);
    int V2toN = dijkstra(v2, N);

    int res = INF;
    res = min(res, StoV1 + V1toV2 + V2toN);
    res = min(res, StoV2 + V1toV2 + V1toN);

    if (res >= INF || V1toV2 == INF)
        cout << -1;
    else
        cout << res;

    return 0;
}
